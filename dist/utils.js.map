{"version":3,"file":"utils.js","sourceRoot":"","sources":["../src/utils.ts"],"names":[],"mappings":";;AAAA,yBAAyB;AACzB,2CAA+B;AAC/B,2CAAqC;AACrC,qCAKiB;AAEjB,SAAgB,UAAU,CAAC,QAAgB;IACzC,IAAG;QACD,EAAE,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;KACvB;IAAA,OAAM,GAAG,EAAC;QACT,IAAG,GAAG,CAAC,IAAI,IAAI,QAAQ;YAAE,OAAO,KAAK,CAAC;KACvC;IACD,OAAO,IAAI,CAAC;AACd,CAAC;AAPD,gCAOC;AAED,SAAgB,OAAO,CAAC,QAAgB;IACtC,OAAO,IAAI,gBAAM,CACf,EAAE,CAAC,YAAY,CAAC,QAAQ,EAAE,OAAO,CAAC,EAClC,QAAQ,CACT,CAAC;AACJ,CAAC;AALD,0BAKC;AAED,SAAgB,eAAe,CAC7B,GAAW,EACX,OAAmC;IAEnC,OAAO,cAAc,CAAC,GAAG,EAAE,OAAO,EAAE,+BAAqB,EAAE,CAAC;SACzD,IAAI,CAAC,QAAQ,CAAC,EAAE;QACf,IAAI,QAAQ,CAAC,MAAM,EAAE;YACnB,MAAM,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,MAAM,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC,CAAC;SACvD;QACD,OAAO,2BAAiB,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;IAC1C,CAAC,CAAC;SACD,KAAK,CAAC,KAAK,CAAC,EAAE;QACb,MAAM,KAAK,CAAC,gCAAgC,GAAG,MAAM,KAAK,CAAC,OAAO,EAAE,CAAC,CAAC;IACxE,CAAC,CAAC,CAAA;AACN,CAAC;AAdD,0CAcC;AAED,SAAgB,cAAc,CAAC,GAAG,EAAE,OAAO,EAAE,KAAK,EAAE,SAAU,EAAE,aAAc;IAC5E,OAAO,oBAAK,CAAC,GAAG,EAAE;QAChB,MAAM,EAAE,MAAM;QACd,OAAO,EAAE,IAAI,oBAAO,iBAClB,cAAc,EAAE,kBAAkB,IAC/B,CAAC,OAAO,IAAI,EAAE,CAAC,EAClB;QACF,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC;YACnB,aAAa;YACb,KAAK;YACL,SAAS;SACV,CAAC;KACH,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,EAAE;QACjB,IAAI,QAAQ,CAAC,EAAE;YACb,OAAO,QAAQ,CAAC,IAAI,EAAE,CAAC;QACzB,OAAO,QAAQ,CAAC,IAAI,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE;YACjC,MAAM,KAAK,CAAC,GAAG,QAAQ,CAAC,MAAM,IAAI,QAAQ,CAAC,UAAU,KAAK,IAAI,EAAE,CAAC,CAAC;QACpE,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC;AAnBD,wCAmBC","sourcesContent":["import * as fs from 'fs';\nimport fetch from 'node-fetch';\nimport { Headers } from 'node-fetch';\nimport {\n  Source,\n  GraphQLSchema,\n  buildClientSchema,\n  getIntrospectionQuery,\n} from 'graphql';\n\nexport function existsSync(filePath: string): boolean {\n  try{\n    fs.statSync(filePath);\n  }catch(err){\n    if(err.code == 'ENOENT') return false;\n  }\n  return true;\n}\n\nexport function readSDL(filepath: string): Source {\n  return new Source(\n    fs.readFileSync(filepath, 'utf-8'),\n    filepath\n  );\n}\n\nexport function getRemoteSchema(\n  url: string,\n  headers: { [name: string]: string },\n): Promise<GraphQLSchema> {\n  return graphqlRequest(url, headers, getIntrospectionQuery())\n    .then(response => {\n      if (response.errors) {\n        throw Error(JSON.stringify(response.errors, null, 2));\n      }\n      return buildClientSchema(response.data);\n    })\n    .catch(error => {\n      throw Error(`Can't get introspection from ${url}:\\n${error.message}`);\n    })\n}\n\nexport function graphqlRequest(url, headers, query, variables?, operationName?) {\n  return fetch(url, {\n    method: 'POST',\n    headers: new Headers({\n      \"content-type\": 'application/json',\n      ...(headers || {}),\n    }),\n    body: JSON.stringify({\n      operationName,\n      query,\n      variables,\n    })\n  }).then(responce => {\n    if (responce.ok)\n      return responce.json();\n    return responce.text().then(body => {\n      throw Error(`${responce.status} ${responce.statusText}\\n${body}`);\n    });\n  });\n}\n"]}