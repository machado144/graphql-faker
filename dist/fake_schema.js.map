{"version":3,"file":"fake_schema.js","sourceRoot":"","sources":["../src/fake_schema.ts"],"names":[],"mappings":"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","sourcesContent":["import * as assert from 'assert';\nimport {\n  isListType,\n  isNonNullType,\n  isCompositeType,\n  isEnumType,\n  isLeafType,\n  isAbstractType,\n  getNullableType,\n  GraphQLLeafType,\n  GraphQLTypeResolver,\n  GraphQLFieldResolver,\n  defaultTypeResolver,\n  defaultFieldResolver,\n  getDirectiveValues,\n} from 'graphql';\n\nimport { getRandomInt, getRandomItem, stdScalarFakers, fakeValue } from './fake';\n\ntype FakeArgs = {\n  type: string;\n  options: {[key: string]: any};\n  locale: string;\n};\ntype ExamplesArgs = {\n  values: [any];\n};\ntype ListLengthArgs = {\n  min: number;\n  max: number;\n};\ntype DirectiveArgs = {\n  fake?: FakeArgs;\n  examples?: ExamplesArgs;\n  listLength?: ListLengthArgs;\n};\n\nexport const fakeTypeResolver: GraphQLTypeResolver<unknown, unknown> = async (\n  value,\n  context,\n  info,\n  abstractType,\n) => {\n  const defaultResolved = await defaultTypeResolver(\n    value,\n    context,\n    info,\n    abstractType,\n  );\n  if (defaultResolved != null) {\n    return defaultResolved;\n  }\n\n  const possibleTypes = info.schema.getPossibleTypes(abstractType);\n  return getRandomItem(possibleTypes);\n};\n\nexport const fakeFieldResolver: GraphQLFieldResolver<unknown, unknown> = async (\n  source,\n  args,\n  context,\n  info,\n) => {\n  const { schema, parentType, fieldName } = info;\n  const fieldDef = parentType.getFields()[fieldName];\n\n  let resolved = await defaultFieldResolver(source, args, context, info);\n  if (resolved === undefined && source && typeof source === 'object') {\n    resolved = source[info.path.key]; // alias value\n  }\n\n  if (resolved === undefined) {\n    resolved = fakeValueOfType(fieldDef.type);\n  }\n\n  if (resolved instanceof Error) {\n    return resolved;\n  }\n\n  const isMutation = parentType === schema.getMutationType();\n  const isCompositeReturn = isCompositeType(getNullableType(fieldDef.type));\n  if (isMutation && isCompositeReturn && isPlainObject(resolved)) {\n    const inputArg = args['input'];\n    return {\n      ...resolved,\n      ...(\n        Object.keys(args).length === 1 && isPlainObject(inputArg)\n          ? inputArg\n          : args\n      ),\n    };\n  }\n\n  return resolved;\n\n  function fakeValueOfType(type) {\n    if (isNonNullType(type)) {\n      return fakeValueOfType(type.ofType);\n    }\n\n    if (isListType(type)) {\n      const uniq = (value,index,self) => self.indexOf(value) === index;\n      let listStruct = Array(getListLength(fieldDef));\n      let valuesList = [];\n      return listStruct\n        .fill(null)\n        .map(() => {\n          let fakeValue;\n          let index = 0;\n  \n          fakeValue = fakeValueOfType(type.ofType)\n          if (valuesList.length === 0) {\n            valuesList.push(fakeValue);\n            return fakeValue;\n          }\n  \n          let currentLength = valuesList.filter(uniq).length;\n          while (valuesList.filter(uniq).length === currentLength) {\n            fakeValue = fakeValueOfType(type.ofType);\n            valuesList.push(fakeValue)\n            index += 1;\n            if (index >= 10) { break }\n          }\n  \n          return fakeValue\n        })\n        .sort((a,b) => a - b)\n    }\n\n    const valueCB = getExampleValueCB(fieldDef) || getFakeValueCB(fieldDef) ||\n        getExampleValueCB(type) || getFakeValueCB(type);\n\n    if (isLeafType(type)) {\n      if (valueCB) {\n        return valueCB();\n      }\n      return fakeLeafValueCB(type)\n    } else {\n      // TODO: error on fake directive\n      const __typename: string = isAbstractType(type)\n        ? getRandomItem(schema.getPossibleTypes(type)).name\n        : type.name;\n\n      return {\n        __typename,\n        ...(valueCB ? valueCB() : {}),\n      };\n    }\n  }\n\n  function getFakeValueCB(object) {\n    const fakeDirective = schema.getDirective('fake');\n    const args = getDirectiveArgs(fakeDirective, object) as FakeArgs;\n    return args && (() => fakeValue(args.type, args.options, args.locale));\n  }\n\n  function getExampleValueCB(object) {\n    const examplesDirective = schema.getDirective('examples');\n    const args = getDirectiveArgs(examplesDirective, object) as ExamplesArgs;\n    return args && (() => getRandomItem(args.values));\n  }\n\n  function getListLength(object): ListLengthArgs {\n    const listLength = schema.getDirective('listLength');\n    const args = getDirectiveArgs(listLength, object) as ListLengthArgs;\n    return args ? getRandomInt(args.min, args.max) : getRandomInt(2, 4);\n  }\n};\n\nfunction fakeLeafValueCB(type: GraphQLLeafType) {\n  if (isEnumType(type)) {\n    const values = type.getValues().map(x => x.value);\n    return getRandomItem(values);\n  }\n\n  const faker = stdScalarFakers[type.name];\n  if (faker) return faker();\n\n  return `<${type.name}>`;\n}\n\nfunction getDirectiveArgs(directive, object): DirectiveArgs {\n  assert(directive != null);\n\n  let args = undefined;\n\n  if (object.astNode != null) {\n    args = getDirectiveValues(directive, object.astNode);\n  }\n\n  if (object.extensionNodes != null) {\n    for (const node of object.extensionNodes) {\n      args = getDirectiveValues(directive, node);\n    }\n  }\n\n  return args;\n}\n\nfunction isPlainObject(maybeObject) {\n  return typeof maybeObject === 'object' &&\n    maybeObject !== null &&\n    !Array.isArray(maybeObject);\n}\n"]}