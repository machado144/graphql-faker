{"version":3,"file":"fake_definition.js","sourceRoot":"","sources":["../src/fake_definition.ts"],"names":[],"mappings":";;AAAA,qCAA+D;AAE/D,MAAM,iBAAiB,GAAG,eAAK,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CA2M/B,CAAC,CAAC;AAEH,SAAS,SAAS,CAAC,OAAO;IACxB,MAAM,EAAE,IAAI,EAAE,IAAI,EAAE,GAAG,OAAO,CAAC;IAC/B,IAAI,IAAI,IAAI,IAAI,EAAE;QAChB,OAAO,EAAE,CAAC;KACX;IACD,OAAO,CAAC,IAAI,KAAK,cAAI,CAAC,oBAAoB,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC;AACtE,CAAC;AAED,MAAM,kBAAkB,GAAG,IAAI,GAAG,CAChC,iBAAiB,CAAC,WAAW,CAAC,GAAG,CAAC,SAAS,CAAC,CAC7C,CAAC;AAEF,SAAgB,wBAAwB,CACtC,SAAuB;IAEvB,6EAA6E;IAC7E,mEAAmE;IACnE,MAAM,WAAW,mCACZ,SAAS,KACZ,WAAW,EAAE,SAAS,CAAC,WAAW,CAAC,MAAM,CAAC,GAAG,CAAC,EAAE;YAC9C,MAAM,IAAI,GAAG,SAAS,CAAC,GAAG,CAAC,CAAC;YAC5B,OAAO,IAAI,KAAK,EAAE,IAAI,CAAC,kBAAkB,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;QACtD,CAAC,CAAC,GACH,CAAC;IAEF,OAAO,mBAAS,CAAC,CAAC,WAAW,EAAE,iBAAiB,CAAC,CAAC,CAAC;AACrD,CAAC;AAdD,4DAcC","sourcesContent":["import { Kind, parse, concatAST, DocumentNode } from 'graphql';\n\nconst fakeDefinitionAST = parse(`\nenum fake__Locale {\n  az\n  cz\n  de\n  de_AT\n  de_CH\n  en\n  en_AU\n  en_BORK\n  en_CA\n  en_GB\n  en_IE\n  en_IND\n  en_US\n  en_au_ocker\n  es\n  es_MX\n  fa\n  fr\n  fr_CA\n  ge\n  id_ID\n  it\n  ja\n  ko\n  nb_NO\n  nep\n  nl\n  pl\n  pt_BR\n  ru\n  sk\n  sv\n  tr\n  uk\n  vi\n  zh_CN\n  zh_TW\n}\n\nenum fake__Types {\n  zipCode\n  city\n  streetName\n  \"Configure address with option \\`useFullAddress\\`\"\n  streetAddress\n  secondaryAddress\n  county\n  country\n  countryCode\n  state\n  stateAbbr\n  latitude\n  longitude\n\n  colorName\n  productCategory\n  productName\n  \"Sum of money. Configure with options \\`minMoney\\`/\\`maxMoney\\` and 'decimalPlaces'.\"\n  money\n  productMaterial\n  product\n\n  companyName\n  companyCatchPhrase\n  companyBS\n\n  dbColumn\n  dbType\n  dbCollation\n  dbEngine\n\n  \"Configure date format with option \\`dateFormat\\`\"\n  pastDate\n  \"Configure date format with option \\`dateFormat\\`\"\n  futureDate\n  \"Configure date format with option \\`dateFormat\\`\"\n  recentDate\n\n  financeAccountName\n  financeTransactionType\n  currencyCode\n  currencyName\n  currencySymbol\n  bitcoinAddress\n  internationalBankAccountNumber\n  bankIdentifierCode\n\n  hackerAbbr\n  hackerPhrase\n\n  \"An image url. Configure image with options: \\`imageCategory\\`, \\`imageWidth\\`, \\`imageHeight\\` and \\`randomizeImageUrl\\`\"\n  imageUrl\n  \"An URL for an avatar\"\n  avatarUrl\n  \"Configure email provider with option: \\`emailProvider\\`\"\n  email\n  url\n  domainName\n  ipv4Address\n  ipv6Address\n  userAgent\n  \"Configure color with option: \\`baseColor\\`\"\n  colorHex\n  macAddress\n  \"Configure password with option \\`passwordLength\\`\"\n  password\n\n  \"Lorem Ipsum text. Configure size with option \\`loremSize\\`\"\n  lorem\n\n  firstName\n  lastName\n  fullName\n  jobTitle\n\n  phoneNumber\n\n  number\n  uuid\n  word\n  words\n  locale\n\n  filename\n  mimeType\n  fileExtension\n  semver\n}\n\nenum fake__imageCategory {\n  abstract\n  animals\n  business\n  cats\n  city\n  food\n  nightlife\n  fashion\n  people\n  nature\n  sports\n  technics\n  transport\n}\n\nenum fake__loremSize {\n  word\n  words\n  sentence\n  sentences\n  paragraph\n  paragraphs\n}\n\ninput fake__color {\n  red255: Int = 0\n  green255: Int = 0\n  blue255: Int = 0\n}\n\ninput fake__options {\n  \"Only for type \\`streetAddress\\`\"\n  useFullAddress: Boolean\n  \"Only for type \\`money\\`\"\n  minMoney: Float\n  \"Only for type \\`money\\`\"\n  maxMoney: Float\n  \"Only for type \\`money\\`\"\n  decimalPlaces: Int\n  \"Only for type \\`imageUrl\\`\"\n  imageWidth: Int\n  \"Only for type \\`imageUrl\\`\"\n  imageHeight: Int\n  \"Only for type \\`imageUrl\\`\"\n  imageCategory: fake__imageCategory\n  \"Only for type \\`imageUrl\\`\"\n  randomizeImageUrl: Boolean\n  \"Only for type \\`email\\`\"\n  emailProvider: String\n  \"Only for type \\`password\\`\"\n  passwordLength: Int\n  \"Only for type \\`lorem\\`\"\n  loremSize: fake__loremSize\n  \"Only for types \\`*Date\\`. Example value: \\`YYYY MM DD\\`. [Full Specification](http://momentjs.com/docs/#/displaying/format/)\"\n  dateFormat: String\n  \"Only for type \\`colorHex\\`. [Details here](https://stackoverflow.com/a/43235/4989887)\"\n  baseColor: fake__color = { red255: 0, green255: 0, blue255: 0 }\n  \"Only for type \\`number\\`\"\n  minNumber: Float\n  \"Only for type \\`number\\`\"\n  maxNumber: Float\n  \"Only for type \\`number\\`\"\n  precisionNumber: Float\n}\n\ndirective @fake(type:fake__Types!, options: fake__options = {}, locale:fake__Locale) on FIELD_DEFINITION | SCALAR\n\ndirective @listLength(min: Int!, max: Int!) on FIELD_DEFINITION\n\nscalar examples__JSON\ndirective @examples(values: [examples__JSON]!) on FIELD_DEFINITION | SCALAR\n`);\n\nfunction defToName(defNode) {\n  const { kind, name } = defNode;\n  if (name == null) {\n    return '';\n  }\n  return (kind === Kind.DIRECTIVE_DEFINITION ? '@' : '') + name.value;\n}\n\nconst fakeDefinitionsSet = new Set(\n  fakeDefinitionAST.definitions.map(defToName),\n);\n\nexport function mergeWithFakeDefinitions(\n  schemaAST: DocumentNode,\n): DocumentNode {\n  // Remove Faker's own definitions that were added to have valid SDL for other\n  // tools, see: https://github.com/APIs-guru/graphql-faker/issues/75\n  const filteredAST = {\n    ...schemaAST,\n    definitions: schemaAST.definitions.filter(def => {\n      const name = defToName(def);\n      return name === '' || !fakeDefinitionsSet.has(name);\n    }),\n  };\n\n  return concatAST([filteredAST, fakeDefinitionAST]);\n}\n"]}