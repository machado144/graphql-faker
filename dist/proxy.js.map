{"version":3,"file":"proxy.js","sourceRoot":"","sources":["../src/proxy.ts"],"names":[],"mappings":"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","sourcesContent":["import { Request } from 'express';\nimport {\n  Kind,\n  print,\n  visit,\n  execute,\n  TypeInfo,\n  isAbstractType,\n  visitWithTypeInfo,\n  separateOperations,\n  ExecutionArgs,\n  GraphQLError,\n} from 'graphql';\n\nimport { graphqlRequest } from './utils';\n\nexport function getProxyExecuteFn(url, headers, forwardHeaders) {\n  //TODO: proxy extensions\n  return (args: ExecutionArgs) => {\n    const { schema, document, contextValue, operationName } = args;\n\n    const request = (contextValue as Request);\n    const proxyHeaders = Object.create(null);\n    for (const name of forwardHeaders) {\n      proxyHeaders[name] = request.headers[name];\n    }\n\n    const strippedAST = removeUnusedVariables(\n      stripExtensionFields(schema, document),\n    );\n\n    const operations = separateOperations(strippedAST);\n    const operationAST = operationName\n      ? operations[operationName]\n      : Object.values(operations)[0];\n\n    return graphqlRequest(\n      url,\n      { ...headers, ...proxyHeaders },\n      print(operationAST),\n      args.variableValues,\n      operationName,\n    ).then(result => proxyResponse(result, args));\n  };\n}\n\nfunction proxyResponse(response, args) {\n  const rootValue = response.data || {};\n  const globalErrors = [];\n\n  for (const error of (response.errors || [])) {\n    const { message, path, extensions } = error;\n    const errorObj = new GraphQLError(\n      message,\n      undefined,\n      undefined,\n      undefined,\n      path,\n      undefined,\n      extensions,\n    );\n\n    if (!path) {\n      globalErrors.push(errorObj);\n      continue;\n    }\n\n    // Recreate root value up to a place where original error was thrown\n    // and place error as field value.\n    pathSet(rootValue, error.path, errorObj);\n  }\n\n  if (globalErrors.length !== 0) {\n    return { errors: globalErrors };\n  }\n\n  return execute({ ...args, rootValue });\n}\n\nfunction pathSet(rootObject, path, value) {\n  let currentObject = rootObject;\n\n  const basePath = [...path];\n  const lastKey = basePath.pop();\n  for (const key of basePath) {\n    if (currentObject[key] == null) {\n      currentObject[key] = typeof key === 'number' ? [] : {};\n    }\n    currentObject = currentObject[key];\n  }\n\n  currentObject[lastKey] = value;\n}\n\nfunction injectTypename(node) {\n  return {\n    ...node,\n    selections: [\n      ...node.selections,\n      {\n        kind: Kind.FIELD,\n        name: {\n          kind: Kind.NAME,\n          value: '__typename',\n        },\n      },\n    ],\n  };\n}\n\nfunction stripExtensionFields(schema, operationAST) {\n  const typeInfo = new TypeInfo(schema);\n\n  return visit(operationAST, visitWithTypeInfo(typeInfo, {\n    [Kind.FIELD]: () => {\n      const fieldDef = typeInfo.getFieldDef();\n      if (fieldDef.name.startsWith('__') || (fieldDef as any).isExtensionField)\n        return null;\n    },\n    [Kind.SELECTION_SET]: {\n      leave(node) {\n        const type = typeInfo.getParentType()\n        if (isAbstractType(type) || node.selections.length === 0)\n          return injectTypename(node);\n      }\n    },\n  }));\n}\n\nfunction removeUnusedVariables(documentAST) {\n  const seenVariables = Object.create(null);\n\n  visit(documentAST, {\n    [Kind.VARIABLE_DEFINITION]: () => false,\n    [Kind.VARIABLE]: (node) => {\n      seenVariables[node.name.value] = true;\n    },\n  });\n\n  return visit(documentAST, {\n    [Kind.VARIABLE_DEFINITION]: (node) => {\n      if (!seenVariables[node.variable.name.value]) {\n        return null;\n      }\n    }\n  });\n}\n"]}