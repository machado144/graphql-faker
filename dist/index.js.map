{"version":3,"file":"index.js","sourceRoot":"","sources":["../src/index.ts"],"names":[],"mappings":"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","sourcesContent":["#!/usr/bin/env node\n\nimport {\n  Source,\n  GraphQLSchema,\n  parse,\n  printSchema,\n  buildASTSchema,\n  extendSchema,\n  isObjectType,\n  isInterfaceType,\n} from 'graphql';\n\nimport * as fs from 'fs';\nimport * as path from 'path';\nimport * as express from 'express';\nimport * as graphqlHTTP from 'express-graphql';\nimport chalk from 'chalk';\nimport * as open from 'open';\nimport * as cors from 'cors';\nimport * as bodyParser from 'body-parser';\n\nimport { parseCLI } from './cli';\nimport { getProxyExecuteFn } from './proxy';\nimport { mergeWithFakeDefinitions } from './fake_definition';\nimport { existsSync, readSDL, getRemoteSchema } from './utils';\nimport { fakeTypeResolver, fakeFieldResolver } from './fake_schema';\n\nconst log = console.log;\n\nparseCLI((options) => {\n  const { extendURL, headers, forwardHeaders } = options;\n  const fileName = options.fileName ||\n    (extendURL ? './schema_extension.faker.graphql' : './schema.faker.graphql');\n\n  if (!options.fileName) {\n    log(chalk.yellow(`Default file ${chalk.magenta(fileName)} is used. ` +\n    `Specify [file] parameter to change.`));\n  }\n\n  let userSDL = existsSync(fileName) && readSDL(fileName);\n\n  if (extendURL) { // run in proxy mode\n    getRemoteSchema(extendURL, headers)\n      .then(schema => {\n        const remoteSDL = new Source(\n          printSchema(schema),\n          `Inrospection from \"${extendURL}\"`,\n        );\n\n        if (!userSDL) {\n          let body = fs.readFileSync(\n            path.join(__dirname, 'default-extend.graphql'),\n            'utf-8',\n          );\n\n          const rootTypeName = schema.getQueryType().name;\n          body = body.replace('<RootTypeName>', rootTypeName);\n\n          userSDL = new Source(body, fileName);\n        }\n\n        const executeFn = getProxyExecuteFn(extendURL, headers, forwardHeaders);\n        runServer(options, userSDL, remoteSDL, executeFn);\n      })\n      .catch(error => {\n        log(chalk.red(error.stack));\n        process.exit(1);\n      });\n  } else {\n    if (!userSDL) {\n      userSDL = new Source(\n        fs.readFileSync(path.join(__dirname, 'default-schema.graphql'), 'utf-8'),\n        fileName,\n      );\n    }\n    runServer(options, userSDL);\n  }\n});\n\nfunction runServer(\n  options,\n  userSDL: Source,\n  remoteSDL?: Source,\n  customExecuteFn?\n) {\n\n\n\t// Adding CLI params for HTTPS\n\tconst { useHttps, tlsKeyFile, tlsCert, tlsCaCert }  = options;\n  \n  var protocol;\n\tif (useHttps) {\n\t\tvar https = require('https');\n\t\tvar fs = require('fs');\n\t\tvar https_options = {\n\t\t  key: fs.readFileSync(tlsKeyFile),\n\t\t  cert: fs.readFileSync(tlsCert),\n\t\t  ca: [ \n\t\t\t\tfs.readFileSync(String(tlsCaCert)),\n\t\t\t\t \n\t\t\t   ]\n\t\t};\n\t\tprotocol = 'https';\n\t} else {\n\t\tprotocol = 'http';\n\t}\n\t\n\n  const { port, openEditor, hostname } = options;\n  const corsOptions = {\n    credentials: true,\n    origin: options.corsOrigin,\n  };\n  const app = express();\n\n  app.options('/graphql', cors(corsOptions));\n  app.use('/graphql', cors(corsOptions), graphqlHTTP(() => ({\n    schema: remoteSDL ? buildSchema(remoteSDL, userSDL) : buildSchema(userSDL),\n    typeResolver: fakeTypeResolver,\n    fieldResolver: fakeFieldResolver,\n    customExecuteFn,\n    graphiql: true,\n  })));\n\n  app.get('/user-sdl', (_, res) => {\n    res.status(200).json({\n      userSDL: userSDL.body,\n      remoteSDL: remoteSDL && remoteSDL.body,\n    });\n  });\n\n  app.use('/user-sdl', bodyParser.text({limit: '8mb'}));\n  app.post('/user-sdl', (req, res) => {\n    try {\n      const fileName = userSDL.name;\n      fs.writeFileSync(fileName, req.body);\n      userSDL = new Source(req.body, fileName);\n\n      const date = (new Date()).toLocaleString();\n      log(`${chalk.green('‚úö')} schema saved to ${chalk.magenta(fileName)} on ${date}`);\n\n      res.status(200).send('ok');\n    } catch(err) {\n      res.status(500).send(err.message)\n    }\n  });\n\n  app.use('/editor', express.static(path.join(__dirname, 'editor')));\n\n  // launch server w/ HTTPS options\n  var server;\n  if (useHttps) {\t\t\n       server = https.createServer(https_options, app).listen(port);\n  } else {\t\n       server = app.listen(port);\n  }\n\n  const shutdown = () => {\n    server.close();\n    process.exit(0);\n  };\n\n  process.on('SIGINT', shutdown);\n  process.on('SIGTERM', shutdown);\n\n  log(`\\n${chalk.green('‚úî')} Your GraphQL Fake API is ready to use üöÄ\n  Here are your links:\n\n  ${chalk.blue('‚ùØ')} Interactive Editor: ${protocol}://${hostname}:${port}/editor\n  ${chalk.blue('‚ùØ')} GraphQL API:        ${protocol}://${hostname}:${port}/graphql\n\n  `);\n    if (openEditor) {\n        setTimeout(() => open(`${protocol}://${hostname}:${port}/editor`), 500);\n    }\n}\n\nfunction buildSchema(schemaSDL: Source, extendSDL?: Source): GraphQLSchema {\n  let schemaAST = parse(schemaSDL);\n  let schema = buildASTSchema(mergeWithFakeDefinitions(schemaAST));\n\n  if (extendSDL) {\n    schema = extendSchema(schema, parse(extendSDL));\n\n    // FIXME: put in field extensions\n    for (const type of Object.values(schema.getTypeMap())) {\n      if (isObjectType(type) || isInterfaceType(type)) {\n        for (const field of Object.values(type.getFields())) {\n          const node = field.astNode;\n          if (node && node.loc && node.loc.source === extendSDL) {\n            (field as any).isExtensionField = true;\n          }\n        }\n      }\n    }\n  }\n\n  return schema;\n}"]}